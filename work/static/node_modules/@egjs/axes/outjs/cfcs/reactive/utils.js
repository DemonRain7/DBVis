import { OBSERVERS_PATH } from "./const";
import { Observer } from "./Observer";
import { keys } from "../core";
export function withReactiveMethods(ref, methods) {
    var obj = {};
    methods.forEach(function (name) {
        obj[name] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var current = ref.current || ref.value;
            return current[name].apply(current, args);
        };
    });
    return obj;
}
export function getObservers(instance) {
    if (!instance[OBSERVERS_PATH]) {
        instance[OBSERVERS_PATH] = {};
    }
    return instance[OBSERVERS_PATH];
}
export function getObserver(instance, name, defaultValue) {
    var observers = getObservers(instance);
    if (!observers[name]) {
        observers[name] = new Observer(defaultValue);
    }
    return observers[name];
}
export function ReactiveSubscribe(Constructor) {
    var prototype = Constructor.prototype;
    prototype["subscribe"] = function (name, callback) {
        getObserver(this, name).subscribe(callback);
    };
    prototype["unsubscribe"] = function (name, callback) {
        var _this = this;
        if (!name) {
            keys(getObservers(this)).forEach(function (observerName) {
                _this.unsubscribe(observerName);
            });
            return;
        }
        if (!(name in this)) {
            return;
        }
        getObserver(this, name).unsubscribe(callback);
    };
}
//# sourceMappingURL=utils.js.map